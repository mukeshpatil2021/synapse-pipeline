{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dai-gcoanalytics-synapse-workspace"
		},
		"LS_Snowflake": {
			"type": "string"
		},
		"LS_AzureBlobStorage": {
			"type": "string"
		},
		"dai-gcoanalytics-synapse-workspace-WorkspaceDefaultStorage": {
			"type": "string"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/PL_control_file')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "read_control_tbl_records",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderQuery": "SELECT schema_name, table_name FROM control_schema.control_metadata WHERE status = 'active'",
								"queryTimeout": "00:05:00"
							},
							"dataset": {
								"referenceName": "ds_daiEdw",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "src_to_cleansed",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "read_control_tbl_records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('read_control_tbl_records').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "src_to_raw",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "initiate_log_entry",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeSource",
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"blockSizeInMB": 64
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_snowflakeTable",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_json",
											"type": "DatasetReference",
											"parameters": {
												"schema_name": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "raw_to_stg",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "src_to_raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Dataflow_blob_to_gen2",
											"type": "DataFlowReference",
											"parameters": {
												"table_name": {
													"value": "'@{item().table_name}'",
													"type": "Expression"
												},
												"schema_name": {
													"value": "'@{item().schema_name}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"schema_name": {
														"value": "@item().schema_name",
														"type": "Expression"
													},
													"table_name": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												}
											}
										},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "stg_to_cleansed",
									"type": "SynapseNotebook",
									"dependsOn": [
										{
											"activity": "raw_to_stg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": "dq_chk_Notebook",
											"type": "NotebookReference"
										},
										"parameters": {
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "string"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "string"
											},
											"rowsCopied": {
												"value": {
													"value": "@activity('src_to_raw').output.rowsCopied",
													"type": "Expression"
												},
												"type": "string"
											},
											"dataRead": {
												"value": {
													"value": "@activity('src_to_raw').output.rowsRead",
													"type": "Expression"
												},
												"type": "string"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "string"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "string"
											},
											"trigger_type": {
												"value": {
													"value": "@pipeline().TriggerType",
													"type": "Expression"
												},
												"type": "string"
											},
											"trigger_id": {
												"value": {
													"value": "@pipeline().TriggerId",
													"type": "Expression"
												},
												"type": "string"
											},
											"trigger_name": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "string"
											},
											"trigger_start_time": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "string"
											}
										},
										"snapshot": true
									}
								},
								{
									"name": "record_reconciliation",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "stg_to_cleansed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[sp_update_count_pipeline_logs]",
										"storedProcedureParameters": {
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"raw_layer_count": {
												"value": {
													"value": "@activity('src_to_raw').output.rowsCopied",
													"type": "Expression"
												},
												"type": "String"
											},
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_rows_count": {
												"value": {
													"value": "@activity('src_to_raw').output.rowsRead",
													"type": "Expression"
												},
												"type": "String"
											},
											"staging_layer_count": {
												"value": {
													"value": "@activity('stg_to_cleansed').output.status.Output.result.exitValue",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "initiate_log_entry",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[sp_initial_pipeline_logs]",
										"storedProcedureParameters": {
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_start_time": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "String"
											},
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "failed_log_entry_record_conciliation",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "record_reconciliation",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[sp_failed_pipeline_logs]",
										"storedProcedureParameters": {
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "failed_log_entry_src_to_raw",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "src_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[sp_failed_pipeline_logs]",
										"storedProcedureParameters": {
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "failed_log_entry_raw_to_stg",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "raw_to_stg",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[sp_failed_pipeline_logs]",
										"storedProcedureParameters": {
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "failed_log_entry_stg_to_cleansed",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "stg_to_cleansed",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[sp_failed_pipeline_logs]",
										"storedProcedureParameters": {
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"schema_name": {
												"value": {
													"value": "@item().schema_name",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								},
								{
									"name": "drop_table_sp",
									"type": "SqlPoolStoredProcedure",
									"dependsOn": [
										{
											"activity": "record_reconciliation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"sqlPool": {
										"referenceName": "dai_gco_analytics_dp",
										"type": "SqlPoolReference"
									},
									"typeProperties": {
										"storedProcedureName": "[[CONTROL_SCHEMA].[drop_table_sp]",
										"storedProcedureParameters": {
											"tableName": {
												"value": {
													"value": "@if(equals(toLower(item().table_name),'training_set_json'),'training_set','validate_set')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "cleansed_to_publish",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "src_to_cleansed",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "SPARK_NB_TRANSFORMATION",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "close_log_entry",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [
							{
								"activity": "cleansed_to_publish",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "dai_gco_analytics_dp",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[[CONTROL_SCHEMA].[sp_success_pipeline_logs]",
							"storedProcedureParameters": {
								"pipeline_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						}
					}
				],
				"variables": {
					"db_list": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-17T07:32:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_daiEdw')]",
				"[concat(variables('workspaceId'), '/notebooks/SPARK_NB_TRANSFORMATION')]",
				"[concat(variables('workspaceId'), '/sqlPools/dai_gco_analytics_dp')]",
				"[concat(variables('workspaceId'), '/datasets/ds_snowflakeTable')]",
				"[concat(variables('workspaceId'), '/datasets/ds_json')]",
				"[concat(variables('workspaceId'), '/dataflows/Dataflow_blob_to_gen2')]",
				"[concat(variables('workspaceId'), '/notebooks/dq_chk_Notebook')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_daiEdw')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": "CONTROL_SCHEMA",
					"table": "control_metadata"
				},
				"sqlPool": {
					"referenceName": "dai_gco_analytics_dp",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/dai_gco_analytics_dp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SPARK_NB_TRANSFORMATION')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "daiGcoSp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1e57588e-baad-47ec-aff7-0da98f7ce3b1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/9a45fe97-6e0f-41e6-8e18-c61706819d17/resourceGroups/RG_DAI_GCO_POC/providers/Microsoft.Synapse/workspaces/dai-gcoanalytics-synapse-workspace/bigDataPools/daiGcoSp",
						"name": "daiGcoSp",
						"type": "Spark",
						"endpoint": "https://dai-gcoanalytics-synapse-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/daiGcoSp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import datetime\r\n",
							"processed_dt = str(datetime.datetime.now().strftime(\"%Y%m%d\"))\r\n",
							"processed_date = 'processed_date='+processed_dt+'/'\r\n",
							"print(processed_date)\r\n",
							"\r\n",
							"training_path = \"abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/marine_poc/training_set_json/\" + processed_date\r\n",
							"\r\n",
							"training_path = \"`\"+training_path+\"`\"\r\n",
							"\r\n",
							"validate_path = \"abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/marine_poc/validate_set_json/\" + processed_date\r\n",
							"\r\n",
							"validate_path = \"`\"+validate_path+\"`\"\r\n",
							"print(validate_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"set hive.exec.dynamic.partition.mode=nonstrict"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS training_set_tf \r\n",
							"(\r\n",
							"\tID STRING,\r\n",
							"\tmmsi STRING,\r\n",
							"\tcurr_running_timestamp STRING,\r\n",
							"\tprev_running_timestamp STRING,\r\n",
							"\trunning_diff_minutes DOUBLE,\r\n",
							"\tfinal_arrival_timestamp STRING,\r\n",
							"\tfinal_arrival_diff_minutes DOUBLE,\r\n",
							"\tcurr_longitude STRING,\r\n",
							"\tcurr_latitude STRING,\r\n",
							"\tend_latitude STRING,\r\n",
							"\tend_longitude STRING,\r\n",
							"\tSPEED STRING,\r\n",
							"\tCOURSE STRING,\r\n",
							"\tHEADING STRING,\r\n",
							"\tTURNRATE STRING,\r\n",
							"\tBREADTH STRING,\r\n",
							"\tVESSEL_TYPE STRING,\r\n",
							"\tVESSEL_MAX_SPEED STRING,\r\n",
							"\tDRAFT STRING,\r\n",
							"\tPOWER STRING,\r\n",
							"\tDWT STRING,\r\n",
							"\tdq_check INTEGER,\r\n",
							"    processed_date string\r\n",
							")\r\n",
							"USING DELTA \r\n",
							"PARTITIONED BY (processed_date)\r\n",
							"LOCATION 'abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/publish/marine_poc/training_set_json/'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"spark.sql(\"\"\"INSERT INTO training_set_tf partition(processed_date)\r\n",
							"select\r\n",
							"ID,\r\n",
							"mmsi,\r\n",
							"timestamp as curr_running_timestamp,\r\n",
							"lag(timestamp) over (partition by mmsi order by timestamp asc) as prev_running_timestamp,\r\n",
							"(unix_timestamp(timestamp) - unix_timestamp(lag(timestamp) over (partition by mmsi order by timestamp asc))) / 60 as running_diff_minutes,\r\n",
							"last_value(timestamp) over (partition by mmsi order by timestamp asc) as final_arrival_timestamp,\r\n",
							"(unix_timestamp(timestamp) - unix_timestamp(last_value(timestamp) over (partition by mmsi order by timestamp asc))) / 60 as final_arrival_diff_minutes,\r\n",
							"lat as curr_longitude,\r\n",
							"lon as curr_latitude,\r\n",
							"last_value(lat) over (partition by mmsi order by timestamp asc) as end_latitude,\r\n",
							"last_value(lon) over (partition by mmsi order by timestamp asc) as end_longitude,\r\n",
							"SPEED,\r\n",
							"COURSE,\r\n",
							"HEADING,\r\n",
							"TURNRATE,\r\n",
							"BREADTH,\r\n",
							"VESSEL_TYPE,\r\n",
							"VESSEL_MAX_SPEED,\r\n",
							"DRAFT,\r\n",
							"POWER,\r\n",
							"DWT,\r\n",
							"dq_check,\r\n",
							"date_format(current_date(),'yyyyMMdd') as processed_date\r\n",
							"from delta.{}\r\n",
							"\"\"\".format(training_path))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE TABLE IF NOT EXISTS validate_set_tf\r\n",
							"(\r\n",
							"\tata  string,\r\n",
							"\tatd  string,\r\n",
							"\tend_lat  string,\r\n",
							"\tend_lon  string,\r\n",
							"\tend_port  string,\r\n",
							"\tend_port_sea_area  string,\r\n",
							"\tid  string,\r\n",
							"\tin_port  string,\r\n",
							"\tlat  string,\r\n",
							"\tlon  string,\r\n",
							"\tmmsi  string,\r\n",
							"\tnode  string,\r\n",
							"\tspeed  string,\r\n",
							"\tstart_port  string,\r\n",
							"\ttimestamp  string,\r\n",
							"\tvessel_type  string,\r\n",
							"\tvoyage  string,\r\n",
							"\tdq_check  integer,\r\n",
							"\tfinal_arrival_diff_minutes  double,\r\n",
							"    processed_date string\r\n",
							")\r\n",
							"USING DELTA\r\n",
							"PARTITIONED BY (processed_date)\r\n",
							"LOCATION 'abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/publish/marine_poc/validate_set_json/';"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"spark.sql(\"\"\"insert into validate_set_tf \r\n",
							"PARTITION (processed_date)\r\n",
							"SELECT\r\n",
							"*,\r\n",
							"(unix_timestamp(TIMESTAMP) - unix_timestamp(ATA)) / 60 as final_arrival_diff_minutes, date_format(current_date(),'yyyyMMdd') AS processed_date\r\n",
							"FROM\r\n",
							"(\r\n",
							"SELECT * FROM delta.{}\r\n",
							")\"\"\".format(validate_path))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import datetime\r\n",
							"processed_date = 'processed_date='+str(datetime.datetime.now().strftime(\"%Y%m%d\"))+'/'\r\n",
							"print(processed_date)\r\n",
							"\r\n",
							"validate_path = \"abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/marine_poc/validate_set_json/\" + processed_date\r\n",
							"\r\n",
							"validate_path = \"`\"+validate_path+\"`\"\r\n",
							"\r\n",
							"print(validate_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"val df = spark.sql(\"\"\"SELECT * from training_set_tf where processed_date=date_format(current_timestamp(),'yyyyMMdd')\"\"\")\r\n",
							"\r\n",
							"df.write.sqlanalytics(\"dai_gco_analytics_dp.dai_db.training_set\", Constants.INTERNAL)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"val df = spark.sql(\"\"\"SELECT * from validate_set_tf where processed_date=date_format(current_timestamp(),'yyyyMMdd')\"\"\")\r\n",
							"\r\n",
							"df.write.sqlanalytics(\"dai_gco_analytics_dp.dai_db.validate_set\", Constants.INTERNAL)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dai_gco_analytics_dp')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_snowflakeTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('LS_Snowflake')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('LS_AzureBlobStorage')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow_blob_to_gen2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_json",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "[parameters('dai-gcoanalytics-synapse-workspace-WorkspaceDefaultStorage')]",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "parameters{\n\ttable_name as string,\n\tschema_name as string\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine') ~> source1\nsource1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'daigcoanalyticsstorage',\n\tfolderPath: (lower('staging/'+$schema_name+'/'+$table_name+'/processed_date='+toString(year(currentTimestamp()))+substring(toString(currentTimestamp()),6,2)+substring(toString(currentTimestamp()),9,2))),\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dq_chk_Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "daiGcoSp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "45ca45a2-e01b-4816-807a-3e370b80273a"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/9a45fe97-6e0f-41e6-8e18-c61706819d17/resourceGroups/RG_DAI_GCO_POC/providers/Microsoft.Synapse/workspaces/dai-gcoanalytics-synapse-workspace/bigDataPools/daiGcoSp",
						"name": "daiGcoSp",
						"type": "Spark",
						"endpoint": "https://dai-gcoanalytics-synapse-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/daiGcoSp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"outputs_hidden": true
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"table_name = \"\"\r\n",
							"schema_name = \"\"\r\n",
							"LOG_ID = \"\"\r\n",
							"PARAMETER_ID = \"\"\r\n",
							"DataFactory_Name = \"\"\r\n",
							"pipeline_Name = \"\"\r\n",
							"pipeline_run_id = \"\"\r\n",
							"Source = \"\"\r\n",
							"Destination = \"\"\r\n",
							"trigger_type = \"\"\r\n",
							"trigger_id = \"\"\r\n",
							"trigger_name = \"\"\r\n",
							"trigger_start_time = \"\"\r\n",
							"rowsCopied = \"\"\r\n",
							"dataRead = \"\"\r\n",
							"No_ParallelCopies = \"\"\r\n",
							"copyDuration_in_secs = \"\"\r\n",
							"effectiveegrationRuntime = \"\"\r\n",
							"Source_Type = \"\"\r\n",
							"Sink_Type = \"\"\r\n",
							"Execution_Status = \"\"\r\n",
							"CopyActivity_Start_Time = \"\"\r\n",
							"CopyActivity_End_Time = \"\"\r\n",
							"CopyActivity_queuingDuration_in_secs = \"\"\r\n",
							"CopyActivity_transferDuration_in_secs = \"\"\r\n",
							"df_count = \"\"\r\n",
							"df_metrics = \"\""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import datetime\r\n",
							"partition_date = str(datetime.datetime.now().strftime(\"%Y%m%d\"))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dq_in_path = 'abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/staging/'+schema_name.lower()+'/'+table_name.lower()+'/processed_date='+partition_date+'/'\r\n",
							"dq_out_path = 'abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/'+schema_name.lower()+'/'+table_name.lower()+'/processed_date='+partition_date+'/'\r\n",
							"#dq_check_path = 'abfss://kannainput@jithendra231221.dfs.core.windows.net/control_file_A/dqtable.csv'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							}
						},
						"source": [
							"%%spark\r\n",
							"\r\n",
							"val df=spark.read.synapsesql(\"dai_gco_analytics_dp.control_schema.dq_constraints\")\r\n",
							"df.createOrReplaceTempView(\"dq_constraints\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.sql(\"\"\"select * from dq_constraints where status = 'active'\"\"\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def dqiterator (table_name,dq_rules):\r\n",
							"  #dq_rules=dq_rules.split(\",\")\r\n",
							"  df=spark.read.format(\"delta\").load(dq_in_path)\r\n",
							"  count = df.count()\r\n",
							"  df=df.withColumn(\"dq_check\",lit(1))\r\n",
							"  dq_rules=dq_rules\r\n",
							"  dq=dq_rules[0].split(\":\")\r\n",
							"  dq_rule=dq[1]\r\n",
							"  print(dq_rule)\r\n",
							"  if dq_rule==\"null_chk\":\r\n",
							"    for column in  dq_rules:\r\n",
							"        columns=column.split(\":\")\r\n",
							"        column_nm=columns[0]\r\n",
							"        df=df.withColumn(\"dq_check\",when(col(column_nm).isNull(),0).when(col(column_nm)==\" \",0).otherwise(col(\"dq_check\")))\r\n",
							"  elif dq_rule==\"numeric_value_chk\":\r\n",
							"    for column in  dq_rules:\r\n",
							"        columns=column.split(\":\")\r\n",
							"        column_nm=columns[0]\r\n",
							"        df=df.withColumn(\"dq_check\",when(~ col(column_nm).rlike(\"^[0-9]*$\"),0).when(col(column_nm)==\" \",0).otherwise(col(\"dq_check\")))\r\n",
							"  df.write.format(\"delta\").mode(\"overwrite\").save(dq_out_path)\r\n",
							"  return count"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"import pandas\r\n",
							"\r\n",
							"#processedFileList=df.select(\"table_name\").distinct()\r\n",
							"#processed_file_list = list(processedFileList.toPandas()[\"table_name\"])\r\n",
							"#for table_name in processed_file_list:\r\n",
							"dq_rules=list(df.filter(col(\"table_name\")==table_name).select(\"dq_rules\").toPandas()[\"dq_rules\"])\r\n",
							"dq_rules= [dq_rule for sublist in  dq_rules for dq_rule in sublist.split(\",\")]\r\n",
							"print(dq_rules)\r\n",
							"print(table_name)\r\n",
							"staging_layer_count = dqiterator(table_name,dq_rules)\r\n",
							"#print(processed_file_list)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"cleansed_count_df = spark.read.format(\"delta\").load(dq_out_path)\r\n",
							"clean_layer_count = cleansed_count_df.count()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"row_count = str(staging_layer_count)+'-'+str(clean_layer_count)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mssparkutils.notebook.exit(row_count)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		}
	]
}