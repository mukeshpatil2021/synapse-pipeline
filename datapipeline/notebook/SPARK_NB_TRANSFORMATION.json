{
	"name": "SPARK_NB_TRANSFORMATION",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "daiGcoSp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "be052155-4a0b-44a6-ac25-fbbff0390a38"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9a45fe97-6e0f-41e6-8e18-c61706819d17/resourceGroups/RG_DAI_GCO_POC/providers/Microsoft.Synapse/workspaces/dai-gcoanalytics-synapse-workspace/bigDataPools/daiGcoSp",
				"name": "daiGcoSp",
				"type": "Spark",
				"endpoint": "https://dai-gcoanalytics-synapse-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/daiGcoSp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import datetime\r\n",
					"processed_dt = str(datetime.datetime.now().strftime(\"%Y%m%d\"))\r\n",
					"processed_date = 'processed_date='+processed_dt+'/'\r\n",
					"print(processed_date)\r\n",
					"\r\n",
					"training_path = \"abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/marine_poc/training_set_json/\" + processed_date\r\n",
					"\r\n",
					"training_path = \"`\"+training_path+\"`\"\r\n",
					"\r\n",
					"validate_path = \"abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/marine_poc/validate_set_json/\" + processed_date\r\n",
					"\r\n",
					"validate_path = \"`\"+validate_path+\"`\"\r\n",
					"print(validate_path)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"set hive.exec.dynamic.partition.mode=nonstrict"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE TABLE IF NOT EXISTS training_set_tf \r\n",
					"(\r\n",
					"\tID STRING,\r\n",
					"\tmmsi STRING,\r\n",
					"\tcurr_running_timestamp STRING,\r\n",
					"\tprev_running_timestamp STRING,\r\n",
					"\trunning_diff_minutes DOUBLE,\r\n",
					"\tfinal_arrival_timestamp STRING,\r\n",
					"\tfinal_arrival_diff_minutes DOUBLE,\r\n",
					"\tcurr_longitude STRING,\r\n",
					"\tcurr_latitude STRING,\r\n",
					"\tend_latitude STRING,\r\n",
					"\tend_longitude STRING,\r\n",
					"\tSPEED STRING,\r\n",
					"\tCOURSE STRING,\r\n",
					"\tHEADING STRING,\r\n",
					"\tTURNRATE STRING,\r\n",
					"\tBREADTH STRING,\r\n",
					"\tVESSEL_TYPE STRING,\r\n",
					"\tVESSEL_MAX_SPEED STRING,\r\n",
					"\tDRAFT STRING,\r\n",
					"\tPOWER STRING,\r\n",
					"\tDWT STRING,\r\n",
					"\tdq_check INTEGER,\r\n",
					"    processed_date string\r\n",
					")\r\n",
					"USING DELTA \r\n",
					"PARTITIONED BY (processed_date)\r\n",
					"LOCATION 'abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/publish/marine_poc/training_set_json/'"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(\"\"\"INSERT INTO training_set_tf partition(processed_date)\r\n",
					"select\r\n",
					"ID,\r\n",
					"mmsi,\r\n",
					"timestamp as curr_running_timestamp,\r\n",
					"lag(timestamp) over (partition by mmsi order by timestamp asc) as prev_running_timestamp,\r\n",
					"(unix_timestamp(timestamp) - unix_timestamp(lag(timestamp) over (partition by mmsi order by timestamp asc))) / 60 as running_diff_minutes,\r\n",
					"last_value(timestamp) over (partition by mmsi order by timestamp asc) as final_arrival_timestamp,\r\n",
					"(unix_timestamp(timestamp) - unix_timestamp(last_value(timestamp) over (partition by mmsi order by timestamp asc))) / 60 as final_arrival_diff_minutes,\r\n",
					"lat as curr_longitude,\r\n",
					"lon as curr_latitude,\r\n",
					"last_value(lat) over (partition by mmsi order by timestamp asc) as end_latitude,\r\n",
					"last_value(lon) over (partition by mmsi order by timestamp asc) as end_longitude,\r\n",
					"SPEED,\r\n",
					"COURSE,\r\n",
					"HEADING,\r\n",
					"TURNRATE,\r\n",
					"BREADTH,\r\n",
					"VESSEL_TYPE,\r\n",
					"VESSEL_MAX_SPEED,\r\n",
					"DRAFT,\r\n",
					"POWER,\r\n",
					"DWT,\r\n",
					"dq_check,\r\n",
					"date_format(current_date(),'yyyyMMdd') as processed_date\r\n",
					"from delta.{}\r\n",
					"\"\"\".format(training_path))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"CREATE TABLE IF NOT EXISTS validate_set_tf\r\n",
					"(\r\n",
					"\tata  string,\r\n",
					"\tatd  string,\r\n",
					"\tend_lat  string,\r\n",
					"\tend_lon  string,\r\n",
					"\tend_port  string,\r\n",
					"\tend_port_sea_area  string,\r\n",
					"\tid  string,\r\n",
					"\tin_port  string,\r\n",
					"\tlat  string,\r\n",
					"\tlon  string,\r\n",
					"\tmmsi  string,\r\n",
					"\tnode  string,\r\n",
					"\tspeed  string,\r\n",
					"\tstart_port  string,\r\n",
					"\ttimestamp  string,\r\n",
					"\tvessel_type  string,\r\n",
					"\tvoyage  string,\r\n",
					"\tdq_check  integer,\r\n",
					"\tfinal_arrival_diff_minutes  double,\r\n",
					"    processed_date string\r\n",
					")\r\n",
					"USING DELTA\r\n",
					"PARTITIONED BY (processed_date)\r\n",
					"LOCATION 'abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/publish/marine_poc/validate_set_json/';"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(\"\"\"insert into validate_set_tf \r\n",
					"PARTITION (processed_date)\r\n",
					"SELECT\r\n",
					"*,\r\n",
					"(unix_timestamp(TIMESTAMP) - unix_timestamp(ATA)) / 60 as final_arrival_diff_minutes, date_format(current_date(),'yyyyMMdd') AS processed_date\r\n",
					"FROM\r\n",
					"(\r\n",
					"SELECT * FROM delta.{}\r\n",
					")\"\"\".format(validate_path))"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import datetime\r\n",
					"processed_date = 'processed_date='+str(datetime.datetime.now().strftime(\"%Y%m%d\"))+'/'\r\n",
					"print(processed_date)\r\n",
					"\r\n",
					"validate_path = \"abfss://daigcoanalyticsstorage@daigcoanalyticsstorage.dfs.core.windows.net/cleansed/marine_poc/validate_set_json/\" + processed_date\r\n",
					"\r\n",
					"validate_path = \"`\"+validate_path+\"`\"\r\n",
					"\r\n",
					"print(validate_path)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"val df = spark.sql(\"\"\"SELECT * from training_set_tf where processed_date=date_format(current_timestamp(),'yyyyMMdd')\"\"\")\r\n",
					"\r\n",
					"df.write.sqlanalytics(\"dai_gco_analytics_dp.dai_db.training_set\", Constants.INTERNAL)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\r\n",
					"\r\n",
					"val df = spark.sql(\"\"\"SELECT * from validate_set_tf where processed_date=date_format(current_timestamp(),'yyyyMMdd')\"\"\")\r\n",
					"\r\n",
					"df.write.sqlanalytics(\"dai_gco_analytics_dp.dai_db.validate_set\", Constants.INTERNAL)"
				],
				"execution_count": 26
			}
		]
	}
}